package com.festu.meeting.service.notification;

import com.festu.meeting.model.Notification;
import com.festu.meeting.repository.NotificationRepository;
import com.festu.meeting.service.notification.argument.CreateNotificationArgument;
import com.festu.meeting.service.notification.argument.SearchNotificationArgument;

import com.festu.meeting.service.notification.argument.UpdateNotificationArgument;
import com.festu.meeting.utls.Lists;
import com.festu.meeting.utls.WhereClauseBuilder;
import com.querydsl.core.types.Predicate;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.springframework.transaction.annotation.Isolation.SERIALIZABLE;


/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class NotificationServiceImpl implements NotificationService {

    private final NotificationRepository repository;

    @Override
    @Transactional
    public Notification create(@NonNull CreateNotificationArgument argument) {
        return repository.save(Notification.builder()
                                           .articleId(argument.getArticleId())
                                           .content(argument.getContent())
                                           .creationDate(argument.getCreationDate())
                                           .read(argument.getRead())
                                           .title(argument.getTitle())
                                           .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Notification> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Notification getExisting(@NonNull UUID id) {
        return repository.findById(id)
                         .orElseThrow(()-> new RuntimeException());
    }

    @Override
    @Transactional(readOnly = true)
    public List<Notification> list(@NonNull SearchNotificationArgument argument, @NonNull Sort sort) {
        Predicate predicate = buildPredicate(argument);

        return Lists.newList(
                repository.findAll(predicate, sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Notification> page(@NonNull SearchNotificationArgument argument, @NonNull Pageable pageable) {
        Predicate predicate = buildPredicate(argument);

        return repository.findAll(predicate, pageable);
    }

    private Predicate buildPredicate(SearchNotificationArgument argument) {
        // TODO implement manual

        return WhereClauseBuilder.getNew()
                                 .build();
    }

    @Override
    @Transactional
    public Notification update(@NonNull UUID id, @NonNull UpdateNotificationArgument argument) {
        Notification entity = getExisting(id);

        entity.setArticleId(argument.getArticleId());
        entity.setContent(argument.getContent());
        entity.setCreationDate(argument.getCreationDate());
        entity.setRead(argument.getRead());
        entity.setTitle(argument.getTitle());

        return repository.save(entity);
    }

    @Override
    @Transactional(isolation = SERIALIZABLE)
    public void delete(@NonNull UUID id) {
        Notification entity = getExisting(id);

        repository.delete(entity);
    }
}