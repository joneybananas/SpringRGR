package com.festu.meeting.service.attachment;


import com.festu.meeting.model.Attachment;
import com.festu.meeting.repository.AttachmentRepository;
import com.festu.meeting.service.attachment.argument.CreateAttachmentArgument;
import com.festu.meeting.service.attachment.argument.SearchAttachmentArgument;
import com.festu.meeting.service.attachment.argument.UpdateAttachmentArgument;
import com.festu.meeting.utls.Lists;
import com.festu.meeting.utls.WhereClauseBuilder;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.lang.NonNull;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.function.Predicate;

/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class AttachmentServiceImpl implements AttachmentService {

    private final AttachmentRepository repository;

    @Override
    @Transactional
    public Attachment create(@NonNull CreateAttachmentArgument argument) {
        return repository.save(Attachment.builder()
                .name(argument.getName())
                .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Attachment> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Attachment getExisting(@NonNull UUID id) {
        return repository.findById(id).orElseThrow(()-> new RuntimeException());
    }

    @Override
    @Transactional(readOnly = true)
    public List<Attachment> list(@NonNull SearchAttachmentArgument argument, @NonNull Sort sort) {


        return Lists.newList(
                repository.findAll( sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Attachment> page(@NonNull SearchAttachmentArgument argument, @NonNull Pageable pageable) {


        return repository.findAll( pageable);
    }


    @Override
    @Transactional
    public Attachment update(@NonNull UUID id, @NonNull UpdateAttachmentArgument argument) {
        Attachment entity = getExisting(id);

        entity.setName(argument.getName());

        return repository.save(entity);
    }

    @Override
    public void delete(@NonNull UUID id) {
        Attachment entity = getExisting(id);

        repository.delete(entity);
    }
}