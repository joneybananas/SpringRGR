package com.festu.meeting.service.article;

import com.festu.meeting.model.Article;
import com.festu.meeting.repository.ArticleRepository;
import com.festu.meeting.service.article.argument.CreateArticleArgument;
import com.festu.meeting.service.article.argument.SearchArticleArgument;
import com.festu.meeting.service.article.argument.UpdateArticleArgument;
import com.festu.meeting.utls.Lists;
import com.festu.meeting.utls.WhereClauseBuilder;

import com.querydsl.core.types.Predicate;

import lombok.NonNull;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import static org.springframework.transaction.annotation.Isolation.SERIALIZABLE;


/**
 * Generated by Thanos
 */
@Service
@RequiredArgsConstructor
public class ArticleServiceImpl implements ArticleService {

    private final ArticleRepository repository;

    @Override
    @Transactional
    public Article create(@NonNull CreateArticleArgument argument) {
        return repository.save(Article.builder()
                                      .content(argument.getContent())
                                      .countDislike(argument.getCountDislike())
                                      .countLike(argument.getCountLike())
                                      .name(argument.getName())
                                      .attachmentId(argument.getAttachmentId())
                                      .build());
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<Article> get(@NonNull UUID id) {
        return repository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Article getExisting(@NonNull UUID id) {
        return repository.findById(id)
                         .orElseThrow(()-> new RuntimeException());
    }

    @Override
    @Transactional(readOnly = true)
    public List<Article> list(@NonNull SearchArticleArgument argument, @NonNull Sort sort) {
        Predicate predicate = buildPredicate(argument);

        return Lists.newList(
                repository.findAll(predicate, sort));
    }

    @Override
    @Transactional(readOnly = true)
    public Page<Article> page(@NonNull SearchArticleArgument argument, @NonNull Pageable pageable) {
        Predicate predicate = buildPredicate(argument);

        return repository.findAll(predicate, pageable);
    }

    private Predicate buildPredicate(SearchArticleArgument argument) {
        // TODO implement manual

        return WhereClauseBuilder.getNew()
                                 .build();
    }

    @Override
    @Transactional
    public Article update(@NonNull UUID id, @NonNull UpdateArticleArgument argument) {
        Article entity = getExisting(id);

        entity.setContent(argument.getContent());
        entity.setCountDislike(argument.getCountDislike());
        entity.setCountLike(argument.getCountLike());
        entity.setName(argument.getName());
        entity.setAttachmentId(argument.getAttachmentId());

        return repository.save(entity);
    }

    @Override
    @Transactional(isolation = SERIALIZABLE)
    public void delete(@NonNull UUID id) {
        Article entity = getExisting(id);

        repository.delete(entity);
    }
}