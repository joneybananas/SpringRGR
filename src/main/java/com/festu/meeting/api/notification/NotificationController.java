package com.festu.meeting.api.notification;

import com.festu.meeting.api.notification.dto.*;
import com.festu.meeting.api.notification.mapper.NotificationMapper;
import com.festu.meeting.model.Notification;
import com.festu.meeting.service.notification.NotificationService;
import com.festu.meeting.service.notification.argument.SearchNotificationArgument;

import com.festu.meeting.service.notification.argument.UpdateNotificationArgument;
import com.festu.meeting.utls.CollectionDto;
import com.festu.meeting.utls.MapperUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;
import java.util.UUID;

import static org.springframework.http.HttpStatus.CREATED;


/**
 * Generated by Thanos
 */
@RestController
@RequestMapping("notification")
@RequiredArgsConstructor
public class NotificationController {

    private final NotificationService service;
    private final NotificationMapper mapper;

    @PostMapping("create")
    @ResponseStatus(CREATED)
    public NotificationDto create(@RequestBody @Valid CreateNotificationDto dto) {
        return MapperUtils.getMapper(mapper::toDto)
                          .compose(service::create)
                          .compose(mapper::toCreateArgument)
                          .apply(dto);
    }

    @GetMapping("{id}")
    public NotificationDto get(@PathVariable UUID id) {
        return MapperUtils.getMapper(mapper::toDto)
                          .compose(service::getExisting)
                          .apply(id);
    }

    @GetMapping("list")
    public List<NotificationListDto> list(SearchNotificationDto dto, Sort sort) {
        SearchNotificationArgument argument = mapper.toSearchArgument(dto);

        List<Notification> list = service.list(argument, sort);

        return MapperUtils.mapList(mapper::toListDto, list);
    }

    @GetMapping("page")
    public CollectionDto<NotificationListDto> page(SearchNotificationDto dto, Pageable pageable) {
        SearchNotificationArgument argument = mapper.toSearchArgument(dto);

        Page<Notification> page = service.page(argument, pageable);

        return MapperUtils.mapPage(mapper::toListDto, page);
    }

    @PostMapping("{id}/update")
    public NotificationDto update(@PathVariable UUID id, @RequestBody @Valid UpdateNotificationDto dto) {
        UpdateNotificationArgument argument = mapper.toUpdateArgument(dto);

        Notification entity = service.update(id, argument);

        return mapper.toDto(entity);
    }

    @PostMapping("{id}/delete")
    public void delete(@PathVariable UUID id) {
        service.delete(id);
    }
}